<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');

class Register extends Controller {
	
	public function __construct()
	{
		parent::__construct('/notifications');
		$this->lang->load('tank_auth');
	}

	public function index()
	{
		login_redirect(); // Redirects the user to their desired URL if logged in
		
		// Load in requirements
		$this->load->library('recaptcha');
		$this->load->library('form_validation');
		$this->load->helper('form');
		
		$this->load->helper('recaptcha');

		// Add custom theme so we can get only image
		$options = "<script>var RecaptchaOptions = {theme: 'white'};</script>\n";

		// Get reCAPTCHA JS and non-JS HTML
		$html = recaptcha_get_html($this->config->item('recaptcha_public_key', 'tank_auth'));
		
		$data['recaptcha_html'] = $options.$html;
		
		$this->form_validation->set_rules('username', 'username', 'required|callback__check_username|max_length[20]');
		$this->form_validation->set_rules('email', 'email address', 'required|callback__check_email|valid_email|max_length[256]');
		$this->form_validation->set_rules('password', 'password', 'required|min_length[5]');
		$this->form_validation->set_rules('confirm_password', 'confirm password', 'required|min_length[5]|matches[password]');
		$this->form_validation->set_rules('recaptcha_response_field', 'Confirmation Code', 'trim|xss_clean|required|callback__check_recaptcha');		
		
		if ($this->form_validation->run() === TRUE)
		{
			if (!is_null($data = $this->tank_auth->create_user($this->form_validation->set_value('username'), $this->form_validation->set_value('email'), $this->form_validation->set_value('password'), TRUE)))
			{
					$data['site_name'] = $this->config->item('website_name', 'tank_auth');

					$data['activation_period'] = $this->config->item('email_activation_expire', 'tank_auth');

					$this->_send_email('activate', $data['email'], $data);

					unset($data['password']); // Clear password (just for any case)
					
					$this->page->show('register/complete');
			}
			else
			{
				$errors = $this->tank_auth->get_error_message();
				foreach ($errors as $k => $v)
				{
					$data['errors'][$k] = $this->lang->line($v);
				}

				$this->page->title = 'Register';
				$this->page->show('register/main', $data);
			}
		}
		else
		{
			$this->page->title = 'Register';
			$this->page->show('register/main', $data);
		}
	}
	
	public function _check_recaptcha()
	{
		$this->load->helper('recaptcha');

		$resp = recaptcha_check_answer($this->config->item('recaptcha_private_key', 'tank_auth'),
				$_SERVER['REMOTE_ADDR'],
				$_POST['recaptcha_challenge_field'],
				$_POST['recaptcha_response_field']);

		if (!$resp->is_valid) {
			$this->form_validation->set_message('_check_recaptcha', $this->lang->line('auth_incorrect_captcha'));
			return FALSE;
		}
		return TRUE;
	}

	public function _check_username($value)
	{
		if(!$this->tank_auth->is_username_available($value))
		{
			$this->form_validation->set_message('_check_username', 'Sorry, that username is already taken');
			return FALSE;
		}
		else
		{
			return TRUE;
		}
	}
	
	public function _check_email($value)
	{
		if(!$this->tank_auth->is_email_available($value))
		{
			$this->form_validation->set_message('_check_email', 'Sorry, that email address is already in use.');
			return FALSE;
		}
		else
		{
			return TRUE;
		}
	}

	public function activate()
	{
		$user_id		= $this->uri->segment(3);
		$new_email_key	= $this->uri->segment(4);

		// Activate user
		if ($this->tank_auth->activate_user($user_id, $new_email_key))
		{
			$this->page->title = 'Registration Complete';
			$this->page->show('register/verification/verified');
		}
		else
		{
			$this->page->title = 'Verification failed';
			$this->page->show('register/verification/failed');
		}
	}
	
	public function resend()
	{
		check_login(); // The user must be logged
		if(is_activated())
		{
			redirect('/');
		}
		
		$user_id = $this->session->userdata('user_id');
		
		
		$data = (array)$this->users->get_user_by_id($user_id, FALSE);
		$data['user_id'] = $data['id'];
		
		
		$data['new_email_key'] = md5(rand().microtime());
		$this->users->set_new_email($user_id, $data['email'], $data['new_email_key'], FALSE);

		$data['site_name']	= $this->config->item('website_name', 'tank_auth');
		$data['activation_period'] = $this->config->item('email_activation_expire', 'tank_auth');
		
		if($this->_send_email('activate', $data['email'], $data))
		{
			$this->page->title = 'Verification Email Sent';
			$this->page->show('register/verification/resent');
		}
		else
		{
			$this->page->title = 'Verification Email Failed';
			$this->page->show('register/verification/resend_failed');
		}
	}

	private function _send_email($type, $email, &$data)
	{
		$this->load->library('email');
		$this->email->from($this->config->item('webmaster_email', 'tank_auth'), $this->config->item('website_name', 'tank_auth'));
		$this->email->reply_to($this->config->item('webmaster_email', 'tank_auth'), $this->config->item('website_name', 'tank_auth'));
		$this->email->to($email);
		$this->email->subject(sprintf($this->lang->line('auth_subject_'.$type), $this->config->item('website_name', 'tank_auth')));
		$this->email->message($this->load->view('emails/'.$type.'-html', $data, TRUE));
		$this->email->set_alt_message($this->load->view('emails/'.$type.'-txt', $data, TRUE));
		if($this->email->send())
		{
			return TRUE;
		}
		else
		{
			return FALSE;
		}
	}
}

/* End of file */