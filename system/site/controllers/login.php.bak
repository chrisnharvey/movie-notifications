<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');

class Login extends Controller {
	
	public function __construct()
	{
		parent::__construct(FALSE);
		
		$this->lang->load('tank_auth');
		$this->load->library('form_validation');
	}
	
	public function index()
	{	
		login_redirect();
		
		$data['message'] = $this->session->flashdata('message');

		$this->form_validation->set_rules('login', 'Login', 'trim|required|xss_clean');
		$this->form_validation->set_rules('password', 'Password', 'trim|required|xss_clean');
		$this->form_validation->set_rules('remember', 'Remember me', 'integer');
		
		// Get login for counting attempts to login
		if($login = $this->input->post('login'))
		{
			$login = $this->security->xss_clean($login);
		}
		else
		{
			$login = '';
		}
		
		$data['show_captcha'] = FALSE;
		
		if ($this->tank_auth->is_max_login_attempts_exceeded($login))
		{
			$this->form_validation->set_rules('recaptcha_response_field', 'reCAPTCHA', 'trim|xss_clean|required|callback__check_recaptcha');
			
			$data['show_captcha'] = TRUE;
			
			$this->load->helper('recaptcha');

			// Add custom theme so we can get only image
			$options = "<script>var RecaptchaOptions = {theme: 'white'};</script>\n";

			// Get reCAPTCHA JS and non-JS HTML
			$html = recaptcha_get_html($this->config->item('recaptcha_public_key', 'tank_auth'));
			
			$data['recaptcha_html'] = $options.$html;
		}

		$data['errors'] = array();

		if ($this->form_validation->run())
		{
			if ($this->tank_auth->login($this->form_validation->set_value('login'), $this->form_validation->set_value('password'), $this->form_validation->set_value('remember'), TRUE, TRUE))
			{
				redirect($this->session->flashdata('return_route') ? $this->session->flashdata('return_route') : '/notifications');
			}
			else
			{
				$errors = $this->tank_auth->get_error_message();
				if (array_key_exists('banned', $errors))
				{
					// User is banned
					$data['message'] .= '<p>Your account has been suspended.';
					$data['message'] .= isset($errors['banned']) ? "<br><strong>Reason:</strong> {$errors['banned']}" : NULL;
					$data['message'] .= '</p>';
				}
				elseif($this->tank_auth->is_logged_in(FALSE))
				{
					redirect($this->session->flashdata('return_route') ? $this->session->flashdata('return_route') : '/notifications');
				}
				else
				{
					foreach($errors as $k => $v)
					{
						$data['errors'][$k] = $this->lang->line($v);
					}
				}
			}
		}
		
		
		
		$this->page->title = 'Login';
		$this->page->show('login/main', $data);
	}

	public function forgot()
	{
		$this->form_validation->set_rules('login', 'Email or username', 'trim|required|xss_clean');
		$this->form_validation->set_rules('recaptcha_response_field', 'reCAPTCHA', 'trim|xss_clean|required|callback__check_recaptcha');
		
		$this->load->helper('recaptcha');

		// Add custom theme so we can get only image
		$options = "<script>var RecaptchaOptions = {theme: 'white'};</script>\n";

		// Get reCAPTCHA JS and non-JS HTML
		$html = recaptcha_get_html($this->config->item('recaptcha_public_key', 'tank_auth'));
		
		$data['recaptcha_html'] = $options.$html;

		$data['errors'] = array();

		if ($this->form_validation->run())
		{								// validation ok
			if (!is_null($data =& $this->tank_auth->forgot_password($this->form_validation->set_value('login'))))
			{
				$data['site_name'] = $this->config->item('website_name', 'tank_auth');

				// Send email with password activation link
				$this->_send_email('forgot_password', $data['email'], $data);

				$data['message'] = $this->lang->line('auth_message_new_password_sent');

			}
			else
			{
				$errors = $this->tank_auth->get_error_message();
				foreach ($errors as $k => $v)
				{
					$data['errors'][$k] = $this->lang->line($v);
				}
			}
		}

		$this->page->title = 'Forgot your password?';
		$this->page->show('login/forgot', $data);
	}

	public function reset()
	{
		$user_id		= $this->uri->segment(3);
		$new_pass_key	= $this->uri->segment(4);

		$this->form_validation->set_rules('new_password', 'New Password', 'trim|required|xss_clean|min_length['.$this->config->item('password_min_length', 'tank_auth').']|max_length['.$this->config->item('password_max_length', 'tank_auth').']|alpha_dash');
		$this->form_validation->set_rules('confirm_new_password', 'Confirm new Password', 'trim|required|xss_clean|matches[new_password]');

		$data['errors'] = array();

		if ($this->form_validation->run())
		{
			if (!is_null($data = $this->tank_auth->reset_password($user_id, $new_pass_key, $this->form_validation->set_value('new_password'))))
			{
				$data['site_name'] = $this->config->item('website_name', 'tank_auth');
				
				// Send email with new password
				$this->_send_email('reset_password', $data['email'], $data);

				$data['message'] = $this->lang->line('auth_message_new_password_activated').' '.anchor('/login/', 'Login');

			} else {														// fail
				$data['message'] = $this->lang->line('auth_message_new_password_failed');
			}
		}
		else
		{
			// Try to activate user by password key (if not activated yet)
			if ($this->config->item('email_activation', 'tank_auth'))
			{
				$this->tank_auth->activate_user($user_id, $new_pass_key, FALSE);
			}

			if (!$this->tank_auth->can_reset_password($user_id, $new_pass_key))
			{
				$data['message'] = $this->lang->line('auth_message_new_password_failed');
			}
		}

		$this->page->title = 'Reset your password';
		$this->page->show('login/reset', $data);
	}
	
	private function _send_email($type, $email, &$data)
	{
		$this->load->library('email');
		$this->email->from($this->config->item('webmaster_email', 'tank_auth'), $this->config->item('website_name', 'tank_auth'));
		$this->email->reply_to($this->config->item('webmaster_email', 'tank_auth'), $this->config->item('website_name', 'tank_auth'));
		$this->email->to($email);
		$this->email->subject(sprintf($this->lang->line('auth_subject_'.$type), $this->config->item('website_name', 'tank_auth')));
		$this->email->message($this->load->view('emails/'.$type.'-html', $data, TRUE));
		$this->email->set_alt_message($this->load->view('emails/'.$type.'-txt', $data, TRUE));
		$this->email->send();
	}
	
	public function _check_recaptcha()
	{
		$this->load->helper('recaptcha');

		$resp = recaptcha_check_answer($this->config->item('recaptcha_private_key', 'tank_auth'),
				$_SERVER['REMOTE_ADDR'],
				$_POST['recaptcha_challenge_field'],
				$_POST['recaptcha_response_field']);

		if (!$resp->is_valid) {
			$this->form_validation->set_message('_check_recaptcha', $this->lang->line('auth_incorrect_captcha'));
			return FALSE;
		}
		return TRUE;
	}
	
	public function app()
	{
		if ( !$this->input->server('PHP_AUTH_USER') || !$this->input->server('PHP_AUTH_PW') )
        {
            $this->output->set_header('WWW-Authenticate: Basic realm="Movie Notifications App"');
            $this->output->set_header('HTTP/1.0 401 Unauthorized');
            $data['error'] = 'Your username and/or password was blank';
			$data['status'] = '401'; 
        }
        else
        {
            $this->load->model('user_m');
			if( $login = $this->user_m->login($this->input->server('PHP_AUTH_USER'), $this->input->server('PHP_AUTH_PW')) === TRUE )
			{
				$data = array(); //$this->user_m->data(); // Return the logged in users data
			}
			elseif($login === FALSE)
			{
				$this->output->set_header('HTTP/1.0 401 Unauthorized');
	            $data['error'] = 'Login failed';
				$data['status'] = '401';
			}
			else
			{
				$this->output->set_header('HTTP/1.0 401 Unauthorized');
	            $data['error'] = $login;
				$data['status'] = '401';
			}
        }
		
		$this->page->json($data);
	}
}

/* End of file */